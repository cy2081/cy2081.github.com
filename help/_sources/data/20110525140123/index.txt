Grammar production displays
======================================================

.. highlight:: rest

Special markup is available for displaying the productions of a formal grammar.
The markup is simple and does not attempt to model all aspects of BNF (or any
derived forms), but provides enough to allow context-free grammars to be
displayed in a way that causes uses of a symbol to be rendered as hyperlinks to
the definition of the symbol.  There is this directive:

.. rst:directive:: .. productionlist:: [name]

   This directive is used to enclose a group of productions.  Each production is
   given on a single line and consists of a name, separated by a colon from the
   following definition.  If the definition spans multiple lines, each
   continuation line must begin with a colon placed at the same column as in the
   first line.

   The argument to :rst:dir:`productionlist` serves to distinguish different sets of
   production lists that belong to different grammars.

   Blank lines are not allowed within ``productionlist`` directive arguments.

   The definition can contain token names which are marked as interpreted text
   (e.g. ``sum ::= `integer` "+" `integer```) -- this generates cross-references
   to the productions of these tokens.  Outside of the production list, you can
   reference to token productions using :rst:role:`token`.

   Note that no further reST parsing is done in the production, so that you
   don't have to escape ``*`` or ``|`` characters.

The following is an example taken from the Python Reference Manual::

   .. productionlist::
      try_stmt: try1_stmt | try2_stmt
      try1_stmt: "try" ":" `suite`
               : ("except" [`expression` ["," `target`]] ":" `suite`)+
               : ["else" ":" `suite`]
               : ["finally" ":" `suite`]
      try2_stmt: "try" ":" `suite`
               : "finally" ":" `suite`





.. _reStructuredText: http://www.baow.com/help/data/20110525114720/index.html


.. _Sphinx Markup: http://www.baow.com/help/data/20110525120240/index.html
.. _Python:

.. _Python Programming Language: http://www.python.org/


.. _Python Package\: Sphinx: http://pypi.python.org/pypi/Sphinx/


.. _Firefox web browser: http://www.mozilla.com/en-US/firefox/fx/


.. _Python Package Index \: setuptools: http://pypi.python.org/pypi/setuptools/


.. _Sphinx: http://sphinx.pocoo.org/index.html


.. _baow: http://www.baow.com/help/baow-3.2.xpi


.. _new_doc: ../20110325202815/add_doc.png

.. |new_doc| image:: ../20110325202815/add_doc.png


.. _generate: ../20110325202955/generate.png

.. |generate| image:: ../20110325202955/generate.png


.. _root path: ../20110425145128/root.png

.. |root path| image:: ../20110425145128/root.png


.. _output path: ../20110325203025/path.png

.. |output path| image:: ../20110325203025/path.png


.. _generate button: ../20110401215016/generate_button.png

.. |generate button| image:: ../20110401215016/generate_button.png


.. _set referencing label: ../20110527095518/2011-05-27-094445.png

.. |set referencing label| image:: ../20110527095518/2011-05-27-094445.png


.. _project: ../20110325205532/project.png

.. |project| image:: ../20110325205532/project.png


.. _project manage: ../20110325215724/project_manage.png

.. |project manage| image:: ../20110325215724/project_manage.png


.. _project info: ../20110325221743/project_info.png

.. |project info| image:: ../20110325221743/project_info.png


.. _screen: ../20110326091043/screen_s2.png

.. |screen| image:: ../20110326091043/screen_s2.png


.. _save image: ../20110524094717/save_image.png

.. |save image| image:: ../20110524094717/save_image.png


.. _toctree: ../20110524102859/toc_tree.png

.. |toctree| image:: ../20110524102859/toc_tree.png


.. _copy image rst: ../20110527100539/copy_image_rst.png

.. |copy image rst| image:: ../20110527100539/copy_image_rst.png


.. _Du Wenshan: ../20110914201520/duws.jpg

.. |Du Wenshan| image:: ../20110914201520/duws.jpg


.. _Gvim: http://www.vim.org/


.. _Emacs: http://www.gnu.org/software/emacs/
